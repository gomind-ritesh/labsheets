package lab9;

public class LinkedList {
		private Node head;
		private long size;
		
		public LinkedList(){
			head = null;
			size = 0;
		}
		
		public Node getHead(){
			return head;
		}
		
		public long getSize(){
			return size;
		}
		
		public boolean isEmpty(){
			return (head == null);
		}
		
		public void display(){
			/*
			 * traverses the linked list and displays all its elements
			 */
			Node current = head;
			System.out.println("Linked list elements: ");
			while(current != null){
				System.out.print("\t" + current);
				current = current.getNext();
			}
		} // end display
		
		public void addFirst(int newElement){
			/*
			 * adds a new element at the beginning of the linked list
			 */
			Node newNode = new Node(newElement);
			newNode.setNext(head);
			head = newNode;
			size++;
		} // end addFirst
		
		public void addLast(int newElement){
			/*
			 * adds a new element at the end of the linked list
			 */
			Node newNode = new Node(newElement);
			if(head == null)
				head = newNode;
			else{
				Node tail = head;
				while(tail.getNext() != null)
					tail = tail.getNext();
				tail.setNext(newNode);
			}
			size++;
		} // end addLast

		public void addOrder(int element){
			/*
			 * adds a new element in an ordered way in the linked list
			 */
			Node newNode = new Node(element);
			
			if (head == null) 	// list is empty
				head = newNode;	
			else if (head.getElement() > element)
				// first element in list has key value greater than element to be added
				// no need to check other nodes because the newNode will come at the beginning of list
				addFirst(element);			
			else{				// new node will go somewhere in the middle of the list
				Node current = head;
				Node previous = head;
				while(current != null && current.getElement() < element){
						previous = current;
						current = current.getNext();
				}
				newNode.setNext(current);
				previous.setNext(newNode);
			}     
			size++;
		} // end addOrder
		
		public boolean searchNode(int searchValue){
			/*
			 * searches for a node with a given value, and returns true if it is found and false otherwise
			 */
			Node current = head;
			while(current != null){
				if(current.getElement() == searchValue)
					return true;
				current = current.getNext();
			}
			return false;
		}  // end searchNode
		
		public boolean modifyNode(int oldElement, int newElement){
			/*
			 * searches for a node and updates its element, if the node is found
			 * returns true if the node was found and its element updated, and false otherwise
			 */
			Node current = head;
			while(current != null){
				if(current.getElement() == oldElement){
					current.setElement(newElement);
					return true;
				}
				current = current.getNext();
			}
			return false;
		} // end modifyNode
		
		public Node deleteFirst(){
			/*
			 * deletes the first node of the linked list
			 */
			Node tmp;
			if(head == null)
				return null;
			tmp = head;
			head = head.getNext();
			tmp.setNext(null);
			size--;
			return tmp;
		} // end deleteFirst
		
		public Node deleteNode(int element){
			/*
			 * deletes a node with a particular element
			 */
			Node current = head;
			Node previous = head;

			if(head == null) return null;
			while(current.getElement() != element && current.getNext() != null){
				previous = current;
				current = current.getNext();
			}
			if(current.getElement() == element){
				if(current == head) head = head.getNext();
				else previous.setNext(current.getNext());
				current.setNext(null);
				return current;
			}
			return null;
		} // end deleteNode
			
		public String toString(){
			String result = "";
			Node current = head;
			while(current != null){
				result += current + " ";
				current = current.getNext();
			}
			return result;
		}

	} // end class LinkedList
}
